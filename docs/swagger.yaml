basePath: /api/v1
definitions:
  model.ContentSection:
    properties:
      content:
        type: string
      examples:
        items:
          type: string
        type: array
      points:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  model.DeepDiveSection:
    properties:
      sections:
        items:
          $ref: '#/definitions/model.ContentSection'
        type: array
    type: object
  model.ErrorResponse:
    properties:
      error:
        example: Error message
        type: string
    type: object
  model.ImpactSection:
    properties:
      points:
        items:
          type: string
        type: array
    type: object
  model.InsightsSection:
    properties:
      points:
        items:
          type: string
        type: array
    type: object
  model.IntroSection:
    properties:
      hook:
        type: string
      question:
        type: string
    type: object
  model.Post:
    properties:
      content:
        allOf:
        - $ref: '#/definitions/model.DeepDiveSection'
        description: Deep Dive section
      created_at:
        type: string
      id:
        type: string
      impact:
        allOf:
        - $ref: '#/definitions/model.ImpactSection'
        description: Why Should I Care section
      insights:
        allOf:
        - $ref: '#/definitions/model.InsightsSection'
        description: Mind = Blown section
      intro:
        allOf:
        - $ref: '#/definitions/model.IntroSection'
        description: WTF section
      is_published:
        type: boolean
      published_at:
        type: string
      resources:
        description: Learn More section
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      slug:
        type: string
      summary:
        allOf:
        - $ref: '#/definitions/model.TLDRSection'
        description: TLDR section
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.PostCreate:
    properties:
      content:
        $ref: '#/definitions/model.DeepDiveSection'
      impact:
        $ref: '#/definitions/model.ImpactSection'
      insights:
        $ref: '#/definitions/model.InsightsSection'
      intro:
        $ref: '#/definitions/model.IntroSection'
      is_published:
        type: boolean
      resources:
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      summary:
        $ref: '#/definitions/model.TLDRSection'
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  model.PostUpdate:
    properties:
      content:
        $ref: '#/definitions/model.DeepDiveSection'
      impact:
        $ref: '#/definitions/model.ImpactSection'
      insights:
        $ref: '#/definitions/model.InsightsSection'
      intro:
        $ref: '#/definitions/model.IntroSection'
      is_published:
        type: boolean
      resources:
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      summary:
        $ref: '#/definitions/model.TLDRSection'
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  model.Resource:
    properties:
      title:
        type: string
      type:
        description: '"documentation", "research", "tutorial", etc.'
        type: string
      url:
        type: string
    type: object
  model.TLDRSection:
    properties:
      points:
        items:
          type: string
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: your@email.com
    name: Your Name
    url: http://your-url.com
  description: API for managing technical blog content
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Blog API
  version: "1.0"
paths:
  /admin/posts:
    post:
      consumes:
      - application/json
      description: Create a new blog post with all its sections
      parameters:
      - description: Post object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.PostCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new blog post
      tags:
      - posts
  /admin/posts/{slug}:
    put:
      consumes:
      - application/json
      description: Update a blog post and its sections by slug
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      - description: Post update object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.PostUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Update a blog post
      tags:
      - posts
  /posts:
    get:
      consumes:
      - application/json
      description: Get a paginated list of blog posts
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: List blog posts
      tags:
      - posts
  /posts/{slug}:
    get:
      consumes:
      - application/json
      description: Get a blog post and all its sections by slug
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get a blog post by slug
      tags:
      - posts
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
swagger: "2.0"
